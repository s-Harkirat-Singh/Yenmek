const express = require("express");
const router = express.Router();
const path = require('path');
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

// Load environment variables more explicitly
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

// Load API Keys from .env
const PEXELS_API_KEY = process.env.PEXELS_API_KEY;
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// Enhanced Debug: Check if API keys are loaded
console.log("=== API KEYS DEBUG ===");
console.log("Pexels API Key loaded:", PEXELS_API_KEY ? "✅ Yes" : "❌ No");
console.log("Groq API Key loaded:", GROQ_API_KEY ? "✅ Yes" : "❌ No");
console.log("GROQ_API_KEY length:", GROQ_API_KEY ? GROQ_API_KEY.length : 0);
console.log("GROQ_API_KEY starts with 'gsk_':", GROQ_API_KEY ? GROQ_API_KEY.startsWith('gsk_') : false);
console.log("First 10 chars of Groq key:", GROQ_API_KEY ? GROQ_API_KEY.substring(0, 10) + "..." : "N/A");
console.log("========================");

async function getImagesForLocation(location) {
  try {
    console.log(`Searching images for: ${location}`);
    
    if (!PEXELS_API_KEY) {
      console.warn("Pexels API key is not configured - skipping image fetch");
      return [];
    }

    const response = await fetch(`https://api.pexels.com/v1/search?query=${encodeURIComponent(location)}&per_page=3`, {
      headers: {
        Authorization: PEXELS_API_KEY
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Pexels API error for "${location}":`, response.status, errorText);
      return []; // Return empty array instead of throwing
    }

    const data = await response.json();
    console.log(`Found ${data.photos.length} images for ${location}`);
    
    // Return image URLs with fallback to empty array
    return data.photos && data.photos.length > 0 
      ? data.photos.map(photo => photo.src.medium)
      : [];
      
  } catch (error) {
    console.error(`Error fetching images for ${location}:`, error.message);
    return []; // Return empty array as fallback
  }
}

async function getItineraryFromAI(destination, days) {
  // Validate API key before making request
  if (!GROQ_API_KEY) {
    throw new Error("Groq API key is not configured. Please check your .env file and ensure GROQ_API_KEY is set.");
  }

  if (!GROQ_API_KEY.startsWith('gsk_')) {
    throw new Error("Invalid Groq API key format. Key should start with 'gsk_'. Please verify your API key.");
  }

  const prompt = `You are a travel expert planning a ${days}-day itinerary for a traveler visiting ${destination}. 

For each day, suggest 2-3 important and famous locations that should not be missed. For every location, include:
- The name of the location
- Why it's important (history, culture, significance)
- What the user can do there (activities within 2-3 hours)

Make the descriptions concise but informative - 2-3 sentences maximum.

Prioritize famous landmarks, cultural experiences, and unique spots. Focus on must-visit places.

Format your response EXACTLY like this:

Day 1
Location: Red Fort
Description: Historic Mughal fortress and UNESCO World Heritage site. Explore the beautiful architecture, museums, and learn about India's rich history. Spend 2-3 hours walking through the complex.

Day 1  
Location: India Gate
Description: Iconic war memorial and popular gathering spot. Great for evening walks and photography. Visit nearby Rajpath for a complete experience.

Continue this format for all days...`;

  try {
    console.log("Making request to Groq API...");
    console.log("Using API key:", GROQ_API_KEY.substring(0, 10) + "...");
    
    const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${GROQ_API_KEY}`,
      },
      body: JSON.stringify({
        model: "llama3-8b-8192",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        max_tokens: 2000
      })
    });

    console.log("Groq API Response Status:", response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Groq API Response Headers:", Object.fromEntries(response.headers.entries()));
      console.error("Groq API Error Response:", errorText);
      
      // Provide more specific error messages
      if (response.status === 401) {
        throw new Error("Invalid or expired Groq API key. Please verify your API key is correct and active.");
      } else if (response.status === 429) {
        throw new Error("Groq API rate limit exceeded. Please try again in a few minutes.");
      } else if (response.status === 500) {
        throw new Error("Groq API server error. Please try again later.");
      } else if (response.status === 400) {
        throw new Error("Invalid request to Groq API. Please check your request parameters.");
      } else {
        throw new Error(`Groq API error: ${response.status} - ${errorText}`);
      }
    }

    const completion = await response.json();
    
    if (!completion.choices || !completion.choices[0] || !completion.choices[0].message) {
      console.error("Invalid Groq API response structure:", completion);
      throw new Error("Invalid response format from Groq API");
    }
    
    console.log("✅ Successfully received response from Groq API");
    return completion.choices[0].message.content;
    
  } catch (error) {
    console.error("Error in getItineraryFromAI:", error.message);
    throw error;
  }
}

function parseItinerary(rawText) {
  const lines = rawText.split("\n").filter(line => line.trim() !== "");
  const itinerary = [];
  let currentDay = "";

  console.log("Parsing itinerary from AI response...");
  console.log("Total lines to process:", lines.length);

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();

    // Check if line starts with "Day"
    if (line.toLowerCase().startsWith("day")) {
      currentDay = line;
      console.log("Found day:", currentDay);
    } 
    // Check if line starts with "Location:"
    else if (line.toLowerCase().startsWith("location:")) {
      const location = line.replace(/location:/i, "").trim();
      
      // Look for description in next lines
      let description = "";
      let j = i + 1;
      
      while (j < lines.length && !lines[j].toLowerCase().startsWith("day") && !lines[j].toLowerCase().startsWith("location:")) {
        const descLine = lines[j].trim();
        if (descLine.toLowerCase().startsWith("description:")) {
          description += descLine.replace(/description:/i, "").trim();
        } else if (descLine && !descLine.toLowerCase().startsWith("day")) {
          description += (description ? " " : "") + descLine;
        }
        j++;
      }

      if (location && currentDay) {
        const itineraryItem = {
          day: currentDay,
          location: location,
          description: description || "A must-visit destination with rich cultural significance."
        };
        itinerary.push(itineraryItem);
        console.log("Added location:", location, "for", currentDay);
      }
    }
  }

  console.log(`Successfully parsed ${itinerary.length} locations`);
  return itinerary;
}

// Main route
router.post("/", async (req, res) => {
  try {
    console.log("=== NEW ITINERARY REQUEST ===");
    console.log("Request timestamp:", new Date().toISOString());
    console.log("Request body:", req.body);

    // Validate request body
    if (!req.body) {
      console.error("Request body is missing");
      return res.status(400).json({ 
        error: "Request body is missing.",
        success: false 
      });
    }

    const { destination, days } = req.body;

    // Validate required fields
    if (!destination || !days) {
      console.error("Missing required fields:", { destination: !!destination, days: !!days });
      return res.status(400).json({ 
        error: "Destination and number of days are required.",
        success: false 
      });
    }

    // Validate days is a positive number
    const numDays = parseInt(days);
    if (isNaN(numDays) || numDays <= 0 || numDays > 30) {
      console.error("Invalid days value:", days);
      return res.status(400).json({ 
        error: "Days must be a positive number between 1 and 30.",
        success: false 
      });
    }

    console.log(`🎯 Generating ${numDays}-day itinerary for ${destination}...`);

    // Get itinerary from AI
    console.log("Step 1: Getting itinerary from Groq AI...");
    const rawText = await getItineraryFromAI(destination, numDays);
    console.log("Raw AI Response length:", rawText.length);
    console.log("Raw AI Response preview:", rawText.substring(0, 200) + "...");

    // Parse the itinerary
    console.log("Step 2: Parsing itinerary...");
    const itinerary = parseItinerary(rawText);
    
    if (itinerary.length === 0) {
      console.error("Failed to parse any locations from AI response");
      return res.status(500).json({ 
        error: "Failed to parse itinerary from AI response. The AI response format may be unexpected.",
        success: false,
        rawResponse: rawText.substring(0, 500) + "..." // Truncate for debugging
      });
    }

    console.log(`✅ Successfully parsed ${itinerary.length} locations`);

    // Fetch images for each location
    console.log("Step 3: Fetching images for all locations...");
    
    for (let i = 0; i < itinerary.length; i++) {
      const item = itinerary[i];
      console.log(`Fetching images for: ${item.location} (${i + 1}/${itinerary.length})`);
      
      try {
        // Add destination context to search query for better results
        const searchQuery = `${item.location} ${destination}`;
        item.images = await getImagesForLocation(searchQuery);
        
        // If no images found with destination context, try just location name
        if (item.images.length === 0) {
          console.log(`No images found with destination context, trying location only...`);
          item.images = await getImagesForLocation(item.location);
        }
        
        console.log(`✅ Found ${item.images.length} images for ${item.location}`);
      } catch (imageError) {
        console.error(`❌ Failed to fetch images for ${item.location}:`, imageError.message);
        item.images = []; // Provide empty array as fallback
      }
      
      // Add small delay to avoid rate limiting
      if (i < itinerary.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 300));
      }
    }

    console.log("✅ Itinerary generation completed successfully");
    console.log("=== REQUEST COMPLETED ===");

    // Return successful response
    res.json({
      success: true,
      destination: destination,
      days: numDays,
      totalLocations: itinerary.length,
      itinerary: itinerary,
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error("❌ DETAILED ERROR:");
    console.error("Error message:", error.message);
    console.error("Error stack:", error.stack);
    console.error("Request body:", req.body);
    console.error("=== ERROR END ===");
    
    // Determine appropriate status code
    let statusCode = 500;
    if (error.message.includes("API key") || error.message.includes("401")) {
      statusCode = 401;
    } else if (error.message.includes("rate limit") || error.message.includes("429")) {
      statusCode = 429;
    }
    
    res.status(statusCode).json({ 
      error: error.message,
      success: false,
      timestamp: new Date().toISOString(),
      requestId: req.headers['x-request-id'] || 'unknown'
    });
  }
});

// Health check endpoint with enhanced diagnostics
router.get("/health", (req, res) => {
  const healthCheck = {
    status: "OK", 
    message: "Itinerary service is running",
    timestamp: new Date().toISOString(),
    environment: {
      nodeVersion: process.version,
      platform: process.platform,
      uptime: process.uptime()
    },
    apiKeys: {
      groq: GROQ_API_KEY ? "✅ Configured" : "❌ Missing",
      pexels: PEXELS_API_KEY ? "✅ Configured" : "❌ Missing"
    }
  };
  
  console.log("Health check requested:", healthCheck);
  res.json(healthCheck);
});

// Test endpoint for debugging
router.get("/test", async (req, res) => {
  try {
    console.log("Test endpoint called");
    
    const testData = {
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development',
      apiKeysStatus: {
        groq: {
          exists: !!GROQ_API_KEY,
          length: GROQ_API_KEY ? GROQ_API_KEY.length : 0,
          startsWithGsk: GROQ_API_KEY ? GROQ_API_KEY.startsWith('gsk_') : false,
          preview: GROQ_API_KEY ? GROQ_API_KEY.substring(0, 10) + "..." : "N/A"
        },
        pexels: {
          exists: !!PEXELS_API_KEY,
          length: PEXELS_API_KEY ? PEXELS_API_KEY.length : 0
        }
      }
    };
    
    res.json(testData);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;